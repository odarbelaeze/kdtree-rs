var searchIndex = {};
searchIndex["kdtree"] = {"doc":"# kdtree\nK-dimensional tree for Rust(bucket point-region implementation)","items":[[0,"kdtree","kdtree","",null,null],[3,"KdTree","kdtree::kdtree","",null,null],[3,"NearestIter","","",null,null],[4,"ErrorKind","","",null,null],[13,"WrongDimension","","",0,null],[13,"NonFiniteCoordinate","","",0,null],[13,"ZeroCapacity","","",0,null],[11,"fmt","","",1,null],[11,"eq","","",0,null],[11,"fmt","","",0,null],[11,"new","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new_with_capacity","","",1,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"size","","",1,null],[11,"nearest","","",1,null],[11,"within","","",1,null],[11,"iter_nearest","","",1,null],[11,"add","","",1,null],[11,"next","","",2,null],[0,"distance","kdtree","",null,null],[5,"squared_euclidean","kdtree::distance","",null,null]],"paths":[[4,"ErrorKind"],[3,"KdTree"],[3,"NearestIter"]]};
initSearch(searchIndex);
